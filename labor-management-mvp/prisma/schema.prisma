// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Worker {
  id                    String    @id @default(uuid()) // Or @default(cuid()) or use Int @id @default(autoincrement())
  name                  String
  email                 String?   @unique
  phone                 String?
  status                WorkerStatus @default(active)
  notes                 String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  eligibleRoles         WorkerEligibleRole[]
  jobAssignments        JobAssignment[]
  notificationsSent     Notification[] // If you include notifications
}

model Role {
  id                    String    @id @default(uuid())
  name                  String    @unique
  defaultPayRate        Decimal?  @db.Decimal(10, 2)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  eligibleWorkers       WorkerEligibleRole[]
  jobRequirements       JobRoleRequirement[]
  jobAssignments        JobAssignment[]
}

model WorkerEligibleRole {
  workerId              String
  roleId                String
  createdAt             DateTime  @default(now())
  worker                Worker    @relation(fields: [workerId], references: [id])
  role                  Role      @relation(fields: [roleId], references: [id])

  @@id([workerId, roleId])
  @@map("worker_eligible_roles") // Explicitly name the table
}

model Job {
  id                    String    @id @default(uuid())
  organizerName         String?   @map("organizer_name")
  title                 String
  location              String
  startDatetime         DateTime  @map("start_datetime")
  endDatetime           DateTime  @map("end_datetime")
  description           String?   @db.Text
  status                JobStatus @default(draft)
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  roleRequirements      JobRoleRequirement[]
  assignments           JobAssignment[]
  notifications         Notification[] // If you include notifications
}

model JobRoleRequirement {
  id                    String    @id @default(uuid())
  jobId                 String
  roleId                String
  numberOfWorkersNeeded Int       @map("number_of_workers_needed")
  payRateForJob         Decimal   @db.Decimal(10, 2) @map("pay_rate_for_job")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  job                   Job       @relation(fields: [jobId], references: [id])
  role                  Role      @relation(fields: [roleId], references: [id])

  @@map("job_role_requirements")
}

model JobAssignment {
  id                    String    @id @default(uuid())
  jobId                 String
  workerId              String
  roleId                String
  assignedAt            DateTime  @default(now()) @map("assigned_at")
  hoursWorked           Decimal?  @db.Decimal(5, 2) @map("hours_worked")
  notes                 String?   @db.Text
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  job                   Job       @relation(fields: [jobId], references: [id])
  worker                Worker    @relation(fields: [workerId], references: [id])
  role                  Role      @relation(fields: [roleId], references: [id])

  @@map("job_assignments")
}

model Notification { // Optional
  id        String   @id @default(uuid())
  workerId  String
  jobId     String?
  message   String   @db.Text
  sentAt    DateTime @default(now()) @map("sent_at")
  worker    Worker   @relation(fields: [workerId], references: [id])
  job       Job?     @relation(fields: [jobId], references: [id])

  @@map("notifications")
}

enum WorkerStatus {
  active
  inactive
}

enum JobStatus {
  draft
  confirmed
  cancelled
  completed
}
